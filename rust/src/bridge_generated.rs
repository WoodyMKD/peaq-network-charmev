#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.79.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_init_logger_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| init_logger(),
    )
}
fn wire_connect_p2p_impl(port_: MessagePort, url: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "connect_p2p",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_url = url.wire2api();
            move |task_callback| connect_p2p(api_url)
        },
    )
}
fn wire_disconnect_p2p_impl(port_: MessagePort, peer_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "disconnect_p2p",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            move |task_callback| disconnect_p2p(api_peer_id)
        },
    )
}
fn wire_send_identity_challenge_event_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "send_identity_challenge_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| send_identity_challenge_event(),
    )
}
fn wire_send_stop_charge_event_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "send_stop_charge_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| send_stop_charge_event(),
    )
}
fn wire_send_service_requested_event_impl(
    port_: MessagePort,
    provider: impl Wire2Api<String> + UnwindSafe,
    consumer: impl Wire2Api<String> + UnwindSafe,
    token_deposited: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "send_service_requested_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider = provider.wire2api();
            let api_consumer = consumer.wire2api();
            let api_token_deposited = token_deposited.wire2api();
            move |task_callback| {
                send_service_requested_event(api_provider, api_consumer, api_token_deposited)
            }
        },
    )
}
fn wire_get_account_balance_impl(
    port_: MessagePort,
    ws_url: impl Wire2Api<String> + UnwindSafe,
    token_decimals: impl Wire2Api<String> + UnwindSafe,
    seed: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "get_account_balance",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_token_decimals = token_decimals.wire2api();
            let api_seed = seed.wire2api();
            move |task_callback| get_account_balance(api_ws_url, api_token_decimals, api_seed)
        },
    )
}
fn wire_generate_account_impl(
    port_: MessagePort,
    ws_url: impl Wire2Api<String> + UnwindSafe,
    secret_phrase: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "generate_account",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_secret_phrase = secret_phrase.wire2api();
            move |task_callback| generate_account(api_ws_url, api_secret_phrase)
        },
    )
}
fn wire_create_multisig_address_impl(
    port_: MessagePort,
    signatories: impl Wire2Api<Vec<String>> + UnwindSafe,
    threshold: impl Wire2Api<u16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "create_multisig_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_signatories = signatories.wire2api();
            let api_threshold = threshold.wire2api();
            move |task_callback| create_multisig_address(api_signatories, api_threshold)
        },
    )
}
fn wire_approve_multisig_impl(
    port_: MessagePort,
    ws_url: impl Wire2Api<String> + UnwindSafe,
    threshold: impl Wire2Api<u16> + UnwindSafe,
    other_signatories: impl Wire2Api<Vec<String>> + UnwindSafe,
    timepoint_height: impl Wire2Api<u32> + UnwindSafe,
    timepoint_index: impl Wire2Api<u32> + UnwindSafe,
    call_hash: impl Wire2Api<String> + UnwindSafe,
    seed: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "approve_multisig",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_threshold = threshold.wire2api();
            let api_other_signatories = other_signatories.wire2api();
            let api_timepoint_height = timepoint_height.wire2api();
            let api_timepoint_index = timepoint_index.wire2api();
            let api_call_hash = call_hash.wire2api();
            let api_seed = seed.wire2api();
            move |task_callback| {
                approve_multisig(
                    api_ws_url,
                    api_threshold,
                    api_other_signatories,
                    api_timepoint_height,
                    api_timepoint_index,
                    api_call_hash,
                    api_seed,
                )
            }
        },
    )
}
fn wire_transfer_fund_impl(
    port_: MessagePort,
    ws_url: impl Wire2Api<String> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
    amount: impl Wire2Api<String> + UnwindSafe,
    seed: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "transfer_fund",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_address = address.wire2api();
            let api_amount = amount.wire2api();
            let api_seed = seed.wire2api();
            move |task_callback| transfer_fund(api_ws_url, api_address, api_amount, api_seed)
        },
    )
}
fn wire_get_event_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "get_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_event(),
    )
}
fn wire_verify_peer_did_document_impl(
    port_: MessagePort,
    provider_pk: impl Wire2Api<String> + UnwindSafe,
    signature: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "verify_peer_did_document",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_pk = provider_pk.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| verify_peer_did_document(api_provider_pk, api_signature)
        },
    )
}
fn wire_verify_peer_identity_impl(
    port_: MessagePort,
    provider_pk: impl Wire2Api<String> + UnwindSafe,
    plain_data: impl Wire2Api<String> + UnwindSafe,
    signature: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "verify_peer_identity",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_pk = provider_pk.wire2api();
            let api_plain_data = plain_data.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| {
                verify_peer_identity(api_provider_pk, api_plain_data, api_signature)
            }
        },
    )
}
fn wire_fetch_did_document_impl(
    port_: MessagePort,
    ws_url: impl Wire2Api<String> + UnwindSafe,
    public_key: impl Wire2Api<String> + UnwindSafe,
    storage_name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "fetch_did_document",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_public_key = public_key.wire2api();
            let api_storage_name = storage_name.wire2api();
            move |task_callback| fetch_did_document(api_ws_url, api_public_key, api_storage_name)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
